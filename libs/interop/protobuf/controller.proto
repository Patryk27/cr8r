syntax = "proto3";

package cr8r.controller;

import "controller/howdy.proto";
import "controller/assignment/get.proto";
import "controller/attachment/download.proto";
import "controller/attachment/upload.proto";
import "controller/event/add.proto";
import "controller/experiment/create.proto";
import "controller/experiment/delete.proto";
import "controller/experiment/find.proto";
import "controller/experiment/stop.proto";
import "controller/experiment/watch.proto";
import "controller/report/find.proto";
import "controller/runner/find.proto";
import "controller/runner/register.proto";
import "core/report.proto";

// @todo it could (and probably should) be separated into distinct services
service Controller {
    rpc Howdy (PHowdyRequest) returns (PHowdyReply);

    // Assignment-oriented methods
    rpc GetAssignment (PGetAssignmentRequest) returns (PGetAssignmentReply);

    // Attachment-oriented methods
    rpc DownloadAttachment (PDownloadAttachmentRequest) returns (stream PDownloadAttachmentReply);
    rpc UploadAttachment (stream PUploadAttachmentRequest) returns (PUploadAttachmentReply);

    // Experiment-oriented methods
    rpc CreateExperiment (PCreateExperimentRequest) returns (PCreateExperimentReply);
    rpc DeleteExperiment (PDeleteExperimentRequest) returns (PDeleteExperimentReply);
    rpc FindExperiments (PFindExperimentsRequest) returns (PFindExperimentsReply);
    rpc StopExperiment (PStopExperimentRequest) returns (PStopExperimentReply);
    rpc WatchExperiment (PWatchExperimentRequest) returns (stream core.PReport);

    // Event-oriented methods
    rpc AddEvent (PAddEventRequest) returns (PAddEventReply);

    // Report-oriented methods
    rpc FindReports (PFindReportsRequest) returns (PFindReportsReply);

    // Runner-oriented methods
    rpc FindRunners (PFindRunnersRequest) returns (PFindRunnersReply);
    rpc RegisterRunner (PRegisterRunnerRequest) returns (PRegisterRunnerReply);
}